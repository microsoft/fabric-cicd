name: Bump Version

on:
    pull_request:
        types: [closed]
        branches:
            - main
    workflow_dispatch:
        inputs:
            pr_number:
                description: "Pull Request number to create release from"
                required: true
                type: string

permissions:
    contents: write
    pull-requests: read

jobs:
    get-pr-details:
        name: Get PR Details
        runs-on: ubuntu-latest
        if: github.event_name == 'workflow_dispatch'
        outputs:
            pr_title: ${{ steps.pr-info.outputs.pr_title }}
            pr_head_sha: ${{ steps.pr-info.outputs.pr_head_sha }}
        steps:
            - name: Get PR Information
              id: pr-info
              uses: actions/github-script@v7
              with:
                  script: |
                      const prNumber = parseInt('${{ github.event.inputs.pr_number }}');

                      const { data: pr } = await github.rest.pulls.get({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          pull_number: prNumber
                      });

                      console.log(`PR #${prNumber}: ${pr.title}`);
                      console.log(`Head SHA: ${pr.head.sha}`);

                      core.setOutput('pr_title', pr.title);
                      core.setOutput('pr_head_sha', pr.head.sha);

    validate-version-bump:
        name: Validate Version Bump
        runs-on: ubuntu-latest
        needs: [get-pr-details]
        if: always() && !cancelled()
        outputs:
            is_version_bump: ${{ steps.version_bump_check.outputs.is_version_bump }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Validate Version Bump
              id: version_bump_check
              run: |
                  set -e
                  PR_TITLE="${{ github.event.pull_request.title || needs.get-pr-details.outputs.pr_title }}"
                  VERSION_REGEX='^v([0-9]+\.[0-9]+\.[0-9]+)$'

                  # Determine which commit to analyze
                  if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                    COMMIT_SHA="${{ needs.get-pr-details.outputs.pr_head_sha }}"
                    git fetch origin "$COMMIT_SHA"
                  else
                    # For pull_request events (post-merge)
                    COMMIT_SHA="HEAD"
                  fi

                  # Compare the commit with its parent (the commit before it)
                  CHANGED_FILES=$(git diff --name-only ${COMMIT_SHA}^1..$COMMIT_SHA)

                  VERSION_CHANGED=false
                  TITLE_IS_VERSION=false
                  OLD_VERSION=""
                  NEW_VERSION=""
                  # Get VERSION from the parent commit (before the changes)
                  OLD_VERSION=$(git show ${COMMIT_SHA}^1:src/fabric_cicd/constants.py | grep '^VERSION = ' | sed -E 's/VERSION = "([^"]+)"/\1/')
                  # Get VERSION from the current commit
                  NEW_VERSION=$(git show ${COMMIT_SHA}:src/fabric_cicd/constants.py | grep '^VERSION = ' | sed -E 's/VERSION = "([^"]+)"/\1/')

                  if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
                    VERSION_CHANGED=true
                  fi

                  if [[ "$PR_TITLE" =~ $VERSION_REGEX ]]; then
                    TITLE_IS_VERSION=true
                  fi

                  if [ "$TITLE_IS_VERSION" = true ] || [ "$VERSION_CHANGED" = true ]; then
                    echo "is_version_bump=true" >> $GITHUB_OUTPUT
                  else
                    echo "is_version_bump=false" >> $GITHUB_OUTPUT
                    echo "‚úÖ Version bump validation passed."
                    exit 0
                  fi

                  # 1. If version is updated, title must match
                  if [ "$VERSION_CHANGED" = true ]; then
                    EXPECTED_TITLE="v$NEW_VERSION"
                    if [ "$PR_TITLE" != "$EXPECTED_TITLE" ]; then
                      echo "‚ùå PR title must be vX.X.X when VERSION is changed. Expected title: $EXPECTED_TITLE"
                      exit 1
                    fi
                  fi

                  # 2. If title is version format, only constants.py and changelog.md should be changed
                  if [[ "$PR_TITLE" =~ $VERSION_REGEX ]]; then
                    EXPECTED_FILES="src/fabric_cicd/constants.py src/fabric_cicd/changelog.md"
                    SORTED_CHANGED=$(echo $CHANGED_FILES | tr ' ' '\n' | sort | tr '\n' ' ')
                    SORTED_EXPECTED=$(echo $EXPECTED_FILES | tr ' ' '\n' | sort | tr '\n' ' ')
                    if [ "$SORTED_CHANGED" != "$SORTED_EXPECTED" ]; then
                      echo "‚ùå Only constants.py and changelog.md are allowed to be included in a PR that is titled vX.X.X."
                      exit 1
                    fi
                  fi
                  echo "‚úÖ Version bump validation passed."

    bump-version:
        name: Bump Version and Publish Docs
        needs: [get-pr-details, validate-version-bump]
        if: |
            (github.event_name == 'workflow_dispatch') ||
            (github.event_name == 'pull_request' && github.event.pull_request.merged == true && needs.validate-version-bump.outputs.is_version_bump == 'true')
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract version
              id: version-check
              run: |
                  # Determine which commit to get version from
                  if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                    COMMIT_SHA="${{ needs.get-pr-details.outputs.pr_head_sha }}"
                    git fetch origin "$COMMIT_SHA"
                    CONSTANTS_VERSION=$(git show ${COMMIT_SHA}:src/fabric_cicd/constants.py | grep -oP '(?<=^VERSION = ").*(?=")')
                  else
                    # For pull_request events, use current working directory (HEAD)
                    CONSTANTS_VERSION=$(grep -oP '(?<=^VERSION = ").*(?=")' src/fabric_cicd/constants.py)
                  fi

                  echo "Version: $CONSTANTS_VERSION"

                  if [ -z "$CONSTANTS_VERSION" ]; then
                    echo "ERROR: Could not extract version from constants.py"
                    exit 1
                  fi

                  echo "version_number=$CONSTANTS_VERSION" >> $GITHUB_OUTPUT
                  echo "version_tag=v$CONSTANTS_VERSION" >> $GITHUB_OUTPUT

                  # Log trigger type
                  if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                    echo "üöÄ Manual trigger for PR #${{ github.event.inputs.pr_number }}"
                  elif [ "${{ github.event_name }}" = "pull_request" ]; then
                    echo "üöÄ PR merge trigger - validated version bump"
                  fi

            - name: Create tag if needed
              if: needs.validate-version-bump.outputs.is_version_bump == 'true'
              id: tag-creation
              run: |
                  TAG_NAME="${{ steps.version-check.outputs.version_tag }}"
                  echo "Checking tag: $TAG_NAME"

                  # Check if tag exists locally or remotely
                  if git tag -l | grep -q "^$TAG_NAME$" || git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME$"; then
                    echo "‚ÑπÔ∏è Tag $TAG_NAME already exists, will proceed with existing tag"
                    echo "tag_created=false" >> $GITHUB_OUTPUT
                  else
                    echo "‚úÖ Tag $TAG_NAME does not exist, creating new tag"
                    
                    # Configure git
                    git config user.name "github-actions[bot]"
                    git config user.email "github-actions[bot]@users.noreply.github.com"

                    # Create and push the tag
                    git tag "$TAG_NAME"
                    git push origin "$TAG_NAME"
                    echo "‚úÖ Created and pushed tag: $TAG_NAME"
                    echo "tag_created=true" >> $GITHUB_OUTPUT
                  fi

            - name: Create GitHub Release
              if: needs.validate-version-bump.outputs.is_version_bump == 'true'
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const tagName = '${{ steps.version-check.outputs.version_tag }}';

                      try {
                        // Check if release already exists
                        let existingRelease;
                        try {
                          existingRelease = await github.rest.repos.getReleaseByTag({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            tag: tagName
                          });
                          console.log(`‚ÑπÔ∏è Release ${tagName} already exists: ${existingRelease.data.html_url}`);
                          console.log('Skipping release creation');
                          return;
                        } catch (error) {
                          if (error.status !== 404) {
                            throw error;
                          }
                          // Release doesn't exist, proceed to create it
                        }

                        // Extract changelog content for new release
                        const versionNumber = '${{ steps.version-check.outputs.version_number }}';
                        const fs = require('fs');
                        const path = 'src/fabric_cicd/changelog.md';
                        
                        let changelogContent = `Release ${tagName}`;
                        
                        if (fs.existsSync(path)) {
                          try {
                            const changelogText = fs.readFileSync(path, 'utf8');
                            const lines = changelogText.split('\n');
                            let found = false;
                            let content = [];
                            
                            for (const line of lines) {
                              if (line.startsWith('## Version ')) {
                                if (found) break; // Hit next version, stop
                                if (line.includes(`Version ${versionNumber}`)) {
                                  found = true;
                                  continue; // Skip the version header line
                                }
                              } else if (found) {
                                // Skip span tags and empty lines
                                if (line.trim() === '' || line.startsWith('<span')) continue;
                                content.push(line);
                              }
                            }
                            
                            if (content.length > 0) {
                              changelogContent = content.join('\n').trim();
                            } else {
                              console.log(`Changelog content not found for version ${versionNumber}`);
                            }
                          } catch (error) {
                            console.log('Error reading changelog:', error.message);
                          }
                        } else {
                          console.log('Changelog file not found');
                        }

                        // Create new release
                        const release = await github.rest.repos.createRelease({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          tag_name: tagName,
                          name: tagName,
                          body: changelogContent,
                          draft: false,
                          prerelease: false
                        });
                        
                        console.log(`‚úÖ Created GitHub release: ${tagName}`);
                        console.log(`Release URL: ${release.data.html_url}`);
                      } catch (error) {
                        console.error('Failed to create release:', error);
                        throw error;
                      }

            - name: Install Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.9"

            - name: Install Requirements
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install uv

            - name: Deploy GitHub Pages
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  git config user.name github-actions[bot]
                  git config user.email github-actions[bot]@users.noreply.github.com
                  git fetch --no-tags --prune --depth=1 origin +refs/heads/gh-pages:refs/remotes/origin/gh-pages
                  uv sync

                  VERSION="${{ steps.version-check.outputs.version_number }}"
                  echo "Deploying docs for version: $VERSION"

                  uv run mike deploy \
                    --update-aliases \
                    --branch gh-pages \
                    --push \
                    $VERSION \
                    latest
                  uv run mike set-default --push latest
