---
# yamllint disable
name: PR Issue Link Check

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  check-issue-link:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      issues: read
    steps:
      - name: Check PR is linked to an issue
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const repo = context.repo;

            // Get PR details
            const pr = await github.rest.pulls.get({
              owner: repo.owner,
              repo: repo.repo,
              pull_number: prNumber
            });

            const prTitle = pr.data.title || '';

            // First, check for issues linked to the PR via GitHub's native linking
            let linkedIssues = [];
            try {
              // Use GraphQL to get linked issues
              const query = `
                query($owner: String!, $repo: String!, $number: Int!) {
                  repository(owner: $owner, name: $repo) {
                    pullRequest(number: $number) {
                      closingIssuesReferences(first: 10) {
                        nodes {
                          number
                        }
                      }
                    }
                  }
                }
              `;
              
              const result = await github.graphql(query, {
                owner: repo.owner,
                repo: repo.repo,
                number: prNumber
              });
              
              linkedIssues = result.repository.pullRequest.closingIssuesReferences.nodes;
              
              if (linkedIssues.length > 0) {
                console.log(`✅ Found ${linkedIssues.length} linked issue(s): ${linkedIssues.map(issue => `#${issue.number}`).join(', ')}`);
                console.log('✅ Pull request is properly linked to an issue via GitHub linking.');
                return;
              }
            } catch (error) {
              console.log('⚠️ Could not check for linked issues via GraphQL, falling back to text analysis:', error.message);
            }

            // Issue reference patterns - more specific to avoid false positives
            const keywordPatterns = [
              /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#(\d+)/gi,
              /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+https:\/\/github\.com\/[^\/]+\/[^\/]+\/issues\/(\d+)/gi
            ];

            // Generic hash pattern (less specific, used as fallback)
            const hashPattern = /#(\d+)(?!\w)/g;

            let foundIssueNumbers = new Set();

            // Check PR title for issue references
            const textToCheck = prTitle;

            // First, look for keyword-based references (more reliable)
            for (const pattern of keywordPatterns) {
              const matches = textToCheck.matchAll(pattern);
              for (const match of matches) {
                const issueNumber = match[1];
                if (issueNumber && !isNaN(issueNumber)) {
                  foundIssueNumbers.add(parseInt(issueNumber));
                }
              }
            }

            // If no keyword-based references found, look for simple hash references
            if (foundIssueNumbers.size === 0) {
              const matches = textToCheck.matchAll(hashPattern);
              for (const match of matches) {
                const issueNumber = match[1];
                if (issueNumber && !isNaN(issueNumber)) {
                  foundIssueNumbers.add(parseInt(issueNumber));
                }
              }
            }

            if (foundIssueNumbers.size === 0) {
              core.setFailed(
                '❌ This pull request must be linked to an issue. Please:\n' +
                '1. Reference an issue in the PR title using "Fixes #123", "Closes #456", or "Resolves #789"\n' +
                '2. Make sure the referenced issue exists in this repository\n\n' +
                'See our contribution guidelines for more details.'
              );
              return;
            }

            // Verify that the referenced issues actually exist
            let validIssueFound = false;
            const invalidIssues = [];

            for (const issueNumber of foundIssueNumbers) {
              try {
                await github.rest.issues.get({
                  owner: repo.owner,
                  repo: repo.repo,
                  issue_number: issueNumber
                });
                validIssueFound = true;
                console.log(`✅ Found valid issue reference: #${issueNumber}`);
              } catch (error) {
                if (error.status === 404) {
                  invalidIssues.push(issueNumber);
                  console.log(`❌ Issue #${issueNumber} does not exist`);
                }
              }
            }

            if (!validIssueFound) {
              const invalidList = invalidIssues.length > 0 ?
                `\n\nInvalid issue references found: ${invalidIssues.map(n => `#${n}`).join(', ')}` : '';

              core.setFailed(
                '❌ This pull request must be linked to a valid issue in this repository.' +
                invalidList +
                '\n\nPlease:\n' +
                '1. Create an issue first if one doesn\'t exist\n' +
                '2. Reference the issue in the PR title using "Fixes #123", "Closes #456", or "Resolves #789"\n' +
                '3. Make sure the issue number is correct\n\n' +
                'See our contribution guidelines for more details.'
              );
              return;
            }

            console.log('✅ Pull request is properly linked to an issue.');
