name: PR Issue Link Check

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  check-issue-link:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      issues: read
    steps:
      - name: Check PR is linked to an issue
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const repo = context.repo;
            
            // Get PR details
            const pr = await github.rest.pulls.get({
              owner: repo.owner,
              repo: repo.repo,
              pull_number: prNumber
            });
            
            const prBody = pr.data.body || '';
            const prTitle = pr.data.title || '';
            
            // Common issue reference patterns
            const issuePatterns = [
              /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#(\d+)/gi,
              /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+https:\/\/github\.com\/[^\/]+\/[^\/]+\/issues\/(\d+)/gi,
              /#(\d+)/g
            ];
            
            let foundIssueNumbers = new Set();
            
            // Check PR body and title for issue references
            const textToCheck = prBody + ' ' + prTitle;
            
            for (const pattern of issuePatterns) {
              const matches = textToCheck.matchAll(pattern);
              for (const match of matches) {
                const issueNumber = match[1] || match[0].replace('#', '');
                if (issueNumber && !isNaN(issueNumber)) {
                  foundIssueNumbers.add(parseInt(issueNumber));
                }
              }
            }
            
            // Get commits and check commit messages for issue references
            const commits = await github.rest.pulls.listCommits({
              owner: repo.owner,
              repo: repo.repo,
              pull_number: prNumber
            });
            
            for (const commit of commits.data) {
              const commitMessage = commit.commit.message || '';
              for (const pattern of issuePatterns) {
                const matches = commitMessage.matchAll(pattern);
                for (const match of matches) {
                  const issueNumber = match[1] || match[0].replace('#', '');
                  if (issueNumber && !isNaN(issueNumber)) {
                    foundIssueNumbers.add(parseInt(issueNumber));
                  }
                }
              }
            }
            
            if (foundIssueNumbers.size === 0) {
              core.setFailed(
                '❌ This pull request must be linked to an issue. Please:\n' +
                '1. Reference an issue in the PR description using "Fixes #123", "Closes #456", or "Resolves #789"\n' +
                '2. Or reference an issue in your commit messages\n' +
                '3. Make sure the referenced issue exists in this repository\n\n' +
                'See our contribution guidelines for more details.'
              );
              return;
            }
            
            // Verify that the referenced issues actually exist
            let validIssueFound = false;
            const invalidIssues = [];
            
            for (const issueNumber of foundIssueNumbers) {
              try {
                await github.rest.issues.get({
                  owner: repo.owner,
                  repo: repo.repo,
                  issue_number: issueNumber
                });
                validIssueFound = true;
                console.log(`✅ Found valid issue reference: #${issueNumber}`);
              } catch (error) {
                if (error.status === 404) {
                  invalidIssues.push(issueNumber);
                  console.log(`❌ Issue #${issueNumber} does not exist`);
                }
              }
            }
            
            if (!validIssueFound) {
              const invalidList = invalidIssues.length > 0 ? 
                `\n\nInvalid issue references found: ${invalidIssues.map(n => `#${n}`).join(', ')}` : '';
              
              core.setFailed(
                '❌ This pull request must be linked to a valid issue in this repository.' +
                invalidList +
                '\n\nPlease:\n' +
                '1. Create an issue first if one doesn\'t exist\n' +
                '2. Reference the issue using "Fixes #123", "Closes #456", or "Resolves #789"\n' +
                '3. Make sure the issue number is correct\n\n' +
                'See our contribution guidelines for more details.'
              );
              return;
            }
            
            console.log('✅ Pull request is properly linked to an issue.');