{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>Fabric CICD is a Python library designed for use with Microsoft Fabric workspaces. This library is intended to support code-first CICD integrations to seamlessly integrate Source Controlled workspaces into a deployment framework. The goal of this library is to support the CICD developers that don't want to dig into the weeds of interacting directly with the Microsoft Fabric APIs.</p>"},{"location":"#base-expectations","title":"Base Expectations","text":"<ul> <li>Full deployment every time, does not consider commit diffs</li> <li>Deploys into the tenant of the executing identity</li> </ul>"},{"location":"#supported-item-types","title":"Supported Item Types","text":"<p>The following Item Types are supported by the library:</p> <ul> <li>Notebooks</li> <li>Data Pipelines</li> <li>Environments</li> </ul>"},{"location":"#authentication","title":"Authentication","text":"<ul> <li>You can optionally provide your own credential object that aligns with the <code>TokenCredential</code> class. For more details, see the TokenCredential.</li> <li> <p>If you do not provide a <code>token_credential</code> parameter, the library will use the Azure SDK's <code>DefaultAzureCredential</code> for authentication.</p> <ul> <li>Refer to the Azure SDK documentation for the order in which credential types are attempted.</li> <li> <p>For local development with a User Principal Name (UPN), install either the Azure CLI or the Az.Accounts PowerShell module.</p> </li> <li> <p>Note: When no credential is provided, the <code>DefaultAzureCredential</code> may select an unexpected identity. For example, if you log in to the Azure CLI with a Service Principal Name (SPN) but log in to Az.Accounts with a UPN, the <code>DefaultAzureCredential</code> will prioritize the CLI authentication.</p> </li> </ul> </li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install fabric-cicd, run:</p> <pre><code>pip install fabric-cicd\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>The following contains all major, minor, and patch version release notes. Additionally, we will document high-level plans for the library as they evolve. The planned features list is not exhaustive but highlights the most important items.</p>"},{"location":"changelog/#planned-features","title":"Planned Features","text":"<ul> <li>Support for additional item types<ul> <li>Dataflow G2</li> <li>Semantic Model</li> <li>Report</li> </ul> </li> <li>Support for Workspace Folders</li> <li>Enhancements for existing item types<ul> <li>Notebook - Support for attached resources</li> <li>Data Pipeline - Support for all connections w/in activities</li> <li>Environment - Support for attached public libraries - Support for attached custom libraries</li> </ul> </li> </ul>"},{"location":"changelog/#version-010","title":"Version 0.1.0","text":"<p>Release Date: 2025-01-15</p> <ul> <li>Initial public preview release</li> <li>Supports Notebook, Pipeline, and Environment deployments</li> <li>Supports User and System Identity authentication</li> <li>Released to PyPi</li> <li>Onboarded to ReadTheDocs</li> </ul>"},{"location":"code_reference/","title":"Code Reference","text":"<p>Provides tools for managing and publishing items in a Fabric workspace.</p> <p>Classes:</p> Name Description <code>FabricWorkspace</code> <p>A class to manage and publish workspace items to the Fabric API.</p> <p>Functions:</p> Name Description <code>change_log_level</code> <p>Sets the log level for all loggers within the fabric_cicd package. Currently only supports DEBUG.</p> <code>publish_all_items</code> <p>Publishes all items defined in the <code>item_type_in_scope</code> list of the given FabricWorkspace object.</p> <code>unpublish_all_orphan_items</code> <p>Unpublishes all orphaned items not present in the repository except for those matching the exclude regex.</p>"},{"location":"code_reference/#fabric_cicd.FabricWorkspace","title":"FabricWorkspace","text":"<pre><code>FabricWorkspace(workspace_id: str, repository_directory: str, item_type_in_scope: list[str], base_api_url: str = 'https://api.fabric.microsoft.com/', environment: str = 'N/A', token_credential: TokenCredential = None)\n</code></pre> <p>A class to manage and publish workspace items to the Fabric API.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>str</code> <p>The ID of the workspace to interact with.</p> required <code>repository_directory</code> <code>str</code> <p>Directory path where repository items are located.</p> required <code>item_type_in_scope</code> <code>list</code> <p>Item types that should be deployed for given workspace.</p> required <code>base_api_url</code> <code>str</code> <p>Base URL for the Fabric API. Defaults to the Fabric API endpoint.</p> <code>'https://api.fabric.microsoft.com/'</code> <code>environment</code> <code>str</code> <p>The environment to be used for parameterization.</p> <code>'N/A'</code> <code>token_credential</code> <code>str</code> <p>The token credential to use for API requests.</p> <code>None</code> <p>Examples:</p> <p>Basic usage</p> <pre><code>&gt;&gt;&gt; from fabric_cicd import FabricWorkspace\n&gt;&gt;&gt; workspace = FabricWorkspace(\n...     workspace_id=\"your-workspace-id\",\n...     repository_directory=\"/path/to/repo\",\n...     item_type_in_scope=[\"Environment\", \"Notebook\", \"DataPipeline\"]\n... )\n</code></pre> <p>With optional parameters</p> <pre><code>&gt;&gt;&gt; from fabric_cicd import FabricWorkspace\n&gt;&gt;&gt; workspace = FabricWorkspace(\n...     workspace_id=\"your-workspace-id\",\n...     repository_directory=\"/your/path/to/repo\",\n...     item_type_in_scope=[\"Environment\", \"Notebook\", \"DataPipeline\"],\n...     base_api_url=\"https://orgapi.fabric.microsoft.com\",\n...     environment=\"your-target-environment\"\n... )\n</code></pre> <p>With token credential</p> <pre><code>&gt;&gt;&gt; from fabric_cicd import FabricWorkspace\n&gt;&gt;&gt; from azure.identity import ClientSecretCredential\n&gt;&gt;&gt; client_id = \"your-client-id\"\n&gt;&gt;&gt; client_secret = \"your-client-secret\"\n&gt;&gt;&gt; tenant_id = \"your-tenant-id\"\n&gt;&gt;&gt; token_credential = ClientSecretCredential(\n...     client_id=client_id, client_secret=client_secret, tenant_id=tenant_id\n... )\n&gt;&gt;&gt; workspace = FabricWorkspace(\n...     workspace_id=\"your-workspace-id\",\n...     repository_directory=\"/your/path/to/repo\",\n...     item_type_in_scope=[\"Environment\", \"Notebook\", \"DataPipeline\"],\n...     token_credential=token_credential\n... )\n</code></pre>"},{"location":"code_reference/#fabric_cicd.change_log_level","title":"change_log_level","text":"<pre><code>change_log_level(level: str = 'DEBUG') -&gt; None\n</code></pre> <p>Sets the log level for all loggers within the fabric_cicd package. Currently only supports DEBUG.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>str</code> <p>The logging level to set (e.g., DEBUG).</p> <code>'DEBUG'</code> <p>Examples:</p> <p>Basic usage</p> <pre><code>&gt;&gt;&gt; from fabric_cicd import FabricWorkspace, publish_all_items, unpublish_all_orphan_items, change_log_level\n&gt;&gt;&gt; change_log_level(\"DEBUG\")\n&gt;&gt;&gt; workspace = FabricWorkspace(\n...     workspace_id=\"your-workspace-id\",\n...     repository_directory=\"/path/to/repo\",\n...     item_type_in_scope=[\"Environment\", \"Notebook\", \"DataPipeline\"]\n... )\n&gt;&gt;&gt; publish_all_items(workspace)\n&gt;&gt;&gt; unpublish_orphaned_items(workspace)\n</code></pre>"},{"location":"code_reference/#fabric_cicd.publish_all_items","title":"publish_all_items","text":"<pre><code>publish_all_items(fabric_workspace_obj: FabricWorkspace) -&gt; None\n</code></pre> <p>Publishes all items defined in the <code>item_type_in_scope</code> list of the given FabricWorkspace object.</p> <p>Parameters:</p> Name Type Description Default <code>fabric_workspace_obj</code> <code>FabricWorkspace</code> <p>The FabricWorkspace object containing the items to be published.</p> required <p>Examples:</p> <p>Basic usage</p> <pre><code>&gt;&gt;&gt; from fabric_cicd import FabricWorkspace, publish_all_items\n&gt;&gt;&gt; workspace = FabricWorkspace(\n...     workspace_id=\"your-workspace-id\",\n...     repository_directory=\"/path/to/repo\",\n...     item_type_in_scope=[\"Environment\", \"Notebook\", \"DataPipeline\"]\n... )\n&gt;&gt;&gt; publish_all_items(workspace)\n</code></pre>"},{"location":"code_reference/#fabric_cicd.unpublish_all_orphan_items","title":"unpublish_all_orphan_items","text":"<pre><code>unpublish_all_orphan_items(fabric_workspace_obj: FabricWorkspace, item_name_exclude_regex: str = '^$') -&gt; None\n</code></pre> <p>Unpublishes all orphaned items not present in the repository except for those matching the exclude regex.</p> <p>Parameters:</p> Name Type Description Default <code>fabric_workspace_obj</code> <code>FabricWorkspace</code> <p>The FabricWorkspace object containing the items to be published.</p> required <code>item_name_exclude_regex</code> <code>str</code> <p>Regex pattern to exclude specific items from being unpublished. Default is '^$' which will exclude nothing.</p> <code>'^$'</code> <p>Examples:</p> <p>Basic usage</p> <pre><code>&gt;&gt;&gt; from fabric_cicd import FabricWorkspace, publish_all_items, unpublish_all_orphan_items\n&gt;&gt;&gt; workspace = FabricWorkspace(\n...     workspace_id=\"your-workspace-id\",\n...     repository_directory=\"/path/to/repo\",\n...     item_type_in_scope=[\"Environment\", \"Notebook\", \"DataPipeline\"]\n... )\n&gt;&gt;&gt; publish_all_items(workspace)\n&gt;&gt;&gt; unpublish_orphaned_items(workspace)\n</code></pre> <p>With regex name exclusion</p> <pre><code>&gt;&gt;&gt; from fabric_cicd import FabricWorkspace, publish_all_items, unpublish_all_orphan_items\n&gt;&gt;&gt; workspace = FabricWorkspace(\n...     workspace_id=\"your-workspace-id\",\n...     repository_directory=\"/path/to/repo\",\n...     item_type_in_scope=[\"Environment\", \"Notebook\", \"DataPipeline\"]\n... )\n&gt;&gt;&gt; publish_all_items(workspace)\n&gt;&gt;&gt; exclude_regex = \".*_do_not_delete\"\n&gt;&gt;&gt; unpublish_orphaned_items(workspace, exclude_regex)\n</code></pre>"},{"location":"contribution/","title":"Contribution","text":"<p>This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.</p> <p>When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.</p> <p>This project has adopted the Microsoft Open Source Code of Conduct.</p>"},{"location":"contribution/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Python (version 3.10 or higher)</li> <li>PowerShell</li> <li>Azure CLI or Az.Accounts PowerShell module</li> <li>Visual Studio Code (VS Code)</li> </ul>"},{"location":"contribution/#initial-configuration","title":"Initial Configuration","text":"<ol> <li> <p>Fork the Repository on GitHub:</p> <ul> <li>Go to the repository (fabric-cicd)[https://github.com/microsoft/fabric-cicd] on GitHub.</li> <li>In the top right corner, click on the Fork button.</li> <li>This will create a copy of the repository in your own GitHub account.</li> </ul> </li> <li> <p>Clone Your Forked Repository:</p> <ul> <li>Once the fork is complete, go to your GitHub account and open the forked repository.</li> <li>Click on the Code button, then copy the URL (HTTPS or SSH).</li> <li>Open your terminal and run the following command to clone your forked repository:</li> </ul> <p><code>sh git clone &lt;URL-of-your-forked-repository&gt;</code></p> </li> <li> <p>Create a Virtual Environment:</p> <p><code>sh python -m venv venv</code></p> </li> <li> <p>Activate the Virtual Environment:</p> <ul> <li> <p>On Windows:</p> <p><code>sh .\\venv\\Scripts\\activate</code></p> </li> <li> <p>On macOS and Linux:</p> <p><code>sh source venv/bin/activate</code></p> </li> </ul> </li> <li> <p>Install the Dependencies:</p> <p><code>sh pip install -r requirements.txt</code></p> </li> <li> <p>Open the Project in VS Code and Ensure the Virtual Environment is Selected:</p> <ul> <li>Open the Command Palette (Ctrl+Shift+P) and select <code>Python: Select Interpreter</code>.</li> <li>Choose the interpreter from the <code>venv</code> directory.</li> </ul> </li> <li> <p>Ensure All VS Code Extensions Are Installed:</p> <ul> <li>Open the Command Palette (Ctrl+Shift+P) and select <code>Extensions: Show Recommended Extensions</code>.</li> <li>Install all extensions recommended for the workspace.</li> </ul> </li> </ol>"},{"location":"example/","title":"Examples","text":""},{"location":"example/#authenticate-with-default-credentials","title":"Authenticate with Default Credentials","text":"<pre><code># Copyright (c) Microsoft Corporation.\n# Licensed under the MIT License.\n\n\"\"\"\nExample of leveraging default authentication flows\nRefer to the authentication section in the README for details:\nhttps://github.com/microsoft/fabric-cicd/tree/main?tab=readme-ov-file#authentication\n\"\"\"\n\nfrom fabric_cicd import FabricWorkspace, publish_all_items, unpublish_all_orphan_items\n\n# Sample values for FabricWorkspace parameters\nworkspace_id = \"your-workspace-id\"\nenvironment = \"your-environment\"\nrepository_directory = \"your-repository-directory\"\nitem_type_in_scope = [\"Notebook\", \"DataPipeline\", \"Environment\"]\n\n# Initialize the FabricWorkspace object with the required parameters\ntarget_workspace = FabricWorkspace(\n    workspace_id=workspace_id,\n    environment=environment,\n    repository_directory=repository_directory,\n    item_type_in_scope=item_type_in_scope,\n)\n\n# Publish all items defined in item_type_in_scope\npublish_all_items(target_workspace)\n\n# Unpublish all items defined in item_type_in_scope not found in repository\nunpublish_all_orphan_items(target_workspace)\n\n</code></pre>"},{"location":"example/#authenticate-with-spn-credentials","title":"Authenticate with SPN Credentials","text":"<pre><code># Copyright (c) Microsoft Corporation.\n# Licensed under the MIT License.\n\n\"\"\"\nExample of authenticating with SPN + Secret\nCan be expanded to retrieve values from Key Vault or other sources\n\"\"\"\n\nfrom azure.identity import ClientSecretCredential\n\nfrom fabric_cicd import FabricWorkspace, publish_all_items, unpublish_all_orphan_items\n\nclient_id = \"your-client-id\"\nclient_secret = \"your-client-secret\"\ntenant_id = \"your-tenant-id\"\ntoken_credential = ClientSecretCredential(client_id=client_id, client_secret=client_secret, tenant_id=tenant_id)\n\n# Sample values for FabricWorkspace parameters\nworkspace_id = \"your-workspace-id\"\nenvironment = \"your-environment\"\nrepository_directory = \"your-repository-directory\"\nitem_type_in_scope = [\"Notebook\", \"DataPipeline\", \"Environment\"]\n\n# Initialize the FabricWorkspace object with the required parameters\ntarget_workspace = FabricWorkspace(\n    workspace_id=workspace_id,\n    environment=environment,\n    repository_directory=repository_directory,\n    item_type_in_scope=item_type_in_scope,\n    token_credential=token_credential,\n)\n\n# Publish all items defined in item_type_in_scope\npublish_all_items(target_workspace)\n\n# Unpublish all items defined in item_type_in_scope not found in repository\nunpublish_all_orphan_items(target_workspace)\n\n</code></pre>"},{"location":"example/#setting-variables-within-azure-devops-release","title":"Setting Variables within Azure DevOps Release","text":"<pre><code># Copyright (c) Microsoft Corporation.\n# Licensed under the MIT License.\n\n\"\"\"\nExample to set variables based on the target environment.\nEnvironment is determined based on the branch that produced the build.\n\"\"\"\n\nimport os\nfrom pathlib import Path\n\nfrom fabric_cicd import FabricWorkspace, publish_all_items, unpublish_all_orphan_items\n\nbranch = os.getenv(\"BUILD_SOURCEBRANCHNAME\")\n\n# The defined environment values should match the names found in the parameter.yml file\nif branch == \"Develop\":\n    workspace_id = \"a2745610-0253-4cf3-9e47-0b5cf8aa00f0\"\n    environment = \"dev\"\nelif branch == \"Test\":\n    workspace_id = \"b33ecfe9-a9ad-4aca-ad9c-72c0a728f2c0\"\n    environment = \"test\"\nelif branch == \"Main\":\n    workspace_id = \"9010397b-7c0f-4d93-8620-90e51816e9e9\"\n    environment = \"main\"\nelse:\n    raise ValueError(\"Invalid branch to deploy from\")\n\n# Sample values for FabricWorkspace parameters\nrepository_directory = \"your-repository-directory\"\nitem_type_in_scope = [\"Notebook\", \"DataPipeline\", \"Environment\"]\n\n# Initialize the FabricWorkspace object with the required parameters\ntarget_workspace = FabricWorkspace(\n    workspace_id=workspace_id,\n    environment=environment,\n    repository_directory=repository_directory,\n    item_type_in_scope=item_type_in_scope,\n)\n\n# Publish all items defined in item_type_in_scope\npublish_all_items(target_workspace)\n\n# Unpublish all items defined in item_type_in_scope not found in repository\nunpublish_all_orphan_items(target_workspace)\n\n</code></pre>"},{"location":"example/#setting-variables-within-local-git-branch","title":"Setting Variables within Local GIT Branch","text":"<pre><code># Copyright (c) Microsoft Corporation.\n# Licensed under the MIT License.\n\n\"\"\"\nExample to set variables based on the target environment.\nEnvironment is determined based on the current branch name.\n\"\"\"\n\nfrom pathlib import Path\n\nimport git  # Depends on pip install gitpython\n\nfrom fabric_cicd import FabricWorkspace, publish_all_items, unpublish_all_orphan_items\n\n# In this example, this file is being ran in the root/sample directory\nroot_directory = Path(__file__).resolve().parent.parent\nrepo = git.Repo(root_directory)\nrepo.remotes.origin.pull()\nbranch = repo.active_branch.name\n\n# The defined environment values should match the names found in the parameter.yml file\nif branch == \"Develop\":\n    workspace_id = \"a2745610-0253-4cf3-9e47-0b5cf8aa00f0\"\n    environment = \"dev\"\nelif branch == \"Test\":\n    workspace_id = \"b33ecfe9-a9ad-4aca-ad9c-72c0a728f2c0\"\n    environment = \"test\"\nelif branch == \"Main\":\n    workspace_id = \"9010397b-7c0f-4d93-8620-90e51816e9e9\"\n    environment = \"main\"\nelse:\n    raise ValueError(\"Invalid branch to deploy from\")\n\n# Sample values for FabricWorkspace parameters\nrepository_directory = \"your-repository-directory\"\nitem_type_in_scope = [\"Notebook\", \"DataPipeline\", \"Environment\"]\n\n# Initialize the FabricWorkspace object with the required parameters\ntarget_workspace = FabricWorkspace(\n    workspace_id=workspace_id,\n    environment=environment,\n    repository_directory=repository_directory,\n    item_type_in_scope=item_type_in_scope,\n)\n\n# Publish all items defined in item_type_in_scope\npublish_all_items(target_workspace)\n\n# Unpublish all items defined in item_type_in_scope not found in repository\nunpublish_all_orphan_items(target_workspace)\n\n</code></pre>"},{"location":"example/#using-optional-parameters","title":"Using Optional Parameters","text":"<pre><code># Copyright (c) Microsoft Corporation.\n# Licensed under the MIT License.\n\n\"\"\"\nExample of optional parameters for FabricWorkspace and publish functions.\n\"\"\"\n\nfrom fabric_cicd import FabricWorkspace, change_log_level, publish_all_items, unpublish_all_orphan_items\n\n# Sample values for FabricWorkspace parameters\nworkspace_id = \"your-workspace-id\"\nenvironment = \"your-environment\"\nrepository_directory = \"your-repository-directory\"\nitem_type_in_scope = [\"Notebook\", \"DataPipeline\", \"Environment\"]\nbase_api_url = \"https://msitapi.fabric.microsoft.com/\"\ntoken_credential = TokenCredential\n\n# Optional: Print all API calls to log file\nchange_log_level(\"DEBUG\")\n\n# Initialize the FabricWorkspace object with the required and optional parameters\ntarget_workspace = FabricWorkspace(\n    workspace_id=workspace_id,\n    environment=environment,\n    repository_directory=repository_directory,\n    item_type_in_scope=item_type_in_scope,\n    # Optional: Override base URL in rare cases where it's different\n    base_api_url=base_api_url,\n    # Optional: Override token credential to use a different authentication\n    token_credential=token_credential,\n)\n\n# Publish all items defined in item_type_in_scope\npublish_all_items(target_workspace)\n\n# Unpublish all items defined in item_type_in_scope not found in repository\nunpublish_all_orphan_items(\n    target_workspace,\n    # Optional: Exclude item names matching the regex pattern\n    item_name_exclude_regex=r\"^DEBUG.*\",\n)\n\n</code></pre>"},{"location":"help/","title":"Help","text":""},{"location":"help/#support","title":"Support","text":"<p>This project uses GitHub Issues to track bugs, feature requests, and questions. Please search the existing issues before filing new issues to avoid duplicates. For new issues, file your bug, feature request, or question as a new Issue.</p>"},{"location":"help/#microsoft-support-policy","title":"Microsoft Support Policy","text":"<p>Support for this PROJECT or PRODUCT is limited to the resources listed above.</p>"},{"location":"help/#security","title":"Security","text":"<p>Microsoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include Microsoft, Azure, DotNet, AspNet and Xamarin.</p> <p>If you believe you have found a security vulnerability in any Microsoft-owned repository that meets Microsoft's definition of a security vulnerability, please report it to us as described below.</p>"},{"location":"help/#reporting-security-issues","title":"Reporting Security Issues","text":"<p>Please do not report security vulnerabilities through public GitHub issues.</p> <p>Instead, please report them to the Microsoft Security Response Center (MSRC) at https://msrc.microsoft.com/create-report.</p> <p>If you prefer to submit without logging in, send email to secure@microsoft.com. If possible, encrypt your message with our PGP key; please download it from the Microsoft Security Response Center PGP Key page.</p> <p>You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at microsoft.com/msrc.</p> <p>Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:</p> <ul> <li>Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)</li> <li>Full paths of source file(s) related to the manifestation of the issue</li> <li>The location of the affected source code (tag/branch/commit or direct URL)</li> <li>Any special configuration required to reproduce the issue</li> <li>Step-by-step instructions to reproduce the issue</li> <li>Proof-of-concept or exploit code (if possible)</li> <li>Impact of the issue, including how an attacker might exploit the issue</li> </ul> <p>This information will help us triage your report more quickly.</p> <p>If you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our Microsoft Bug Bounty Program page for more details about our active programs.</p>"},{"location":"help/#preferred-languages","title":"Preferred Languages","text":"<p>We prefer all communications to be in English.</p>"},{"location":"help/#policy","title":"Policy","text":"<p>Microsoft follows the principle of Coordinated Vulnerability Disclosure.</p>"},{"location":"help/#license","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) Microsoft Corporation.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE\n</code></pre>"}]}